#+TITLE: Computational Category Theory
#+OPTIONS: num:nil
#+STARTUP: indent

* Chapter 1

  (nothing here)

* Chapter 2

** Exercises

*** Exercise 1

**** 1.

#+BEGIN_EXAMPLE
  val x = 3 : int
  val y = 4 : int
  val z = 4 : int
#+END_EXAMPLE

#+BEGIN_SRC sml
  val x = 3; val y = 4 and z = x + 1
#+END_SRC

#+RESULTS:
: val y = 4 : int
: val z = 4 : int

**** 2.

#+BEGIN_EXAMPLE
  val it = 3 : int
#+END_EXAMPLE

#+BEGIN_SRC sml
  let val x = 1 and y = 2 in x + y end
#+END_SRC

#+RESULTS:
: val it = 3 : int

**** 3.

Error.  The RHS of every binding is evaluated before any binding
occurs.

#+BEGIN_SRC sml
  val p = 3 and q = p + 1
#+END_SRC

#+RESULTS:
: stdIn:1.20 Error: unbound variable or constructor: p

**** 4.

#+BEGIN_EXAMPLE
  val it = 7 : int
#+END_EXAMPLE

#+BEGIN_SRC sml
  let val (x, y) = (2, 3) in 2 * x + y end
#+END_SRC

#+RESULTS:
: val it = 7 : int

**** 5.

#+BEGIN_EXAMPLE
val it = 8 : int
#+END_EXAMPLE

#+BEGIN_SRC sml
  let val x = 1 in let val y = x + 2 in let val x = 5 in x + y end end end
#+END_SRC

#+RESULTS:
: val it = 8 : int

**** 6.

#+BEGIN_EXAMPLE
  val x = (2, 3) : int * int
  val y = (4, (5, 6)) : int * (int * int)
  val p = (5, 6) : int * int
#+END_EXAMPLE

#+BEGIN_SRC sml
  val (x, y as (_, p)) = ((2, 3), (4, (5, 6)))
#+END_SRC

#+RESULTS:
: val x = (2,3) : int * int
: val y = (4,(5,6)) : int * (int * int)
: val p = (5,6) : int * int

*** Exercise 2

**** 1.

#+BEGIN_SRC sml
  fun sign n = n > 0
#+END_SRC

#+RESULTS:
: val sign = fn : int -> bool

**** 2.

#+BEGIN_SRC sml
  fun absValue n = if n < 0 then ~n else n
#+END_SRC

#+RESULTS:
: val absValue = fn : int -> int

**** 3.

#+BEGIN_SRC sml
  fun maximum (n, m) = if m > n then m else n
#+END_SRC

#+RESULTS:
: val maximum = fn : int * int -> int

**** 4.

#+BEGIN_SRC sml
  local open IntInf
  in
     fun fibonacci n =
       let val rec loop = fn (1, n, _) => n
                           | (i, n, n') => loop (i - 1, n', n + n')
       in
          if n < 1 then raise Domain else loop (n, 1, 1)
       end
  end
#+END_SRC

#+RESULTS:
: val fibonacci = fn : IntInf.int -> IntInf.int

*** Exercise 3

#+BEGIN_SRC sml
  structure Nat =
     struct
        datatype t = O | S of t

        val rec toInt : t -> IntInf.int =
           fn O => 0
            | S n => 1 + toInt n

        val rec add =
           fn (O, m) => m
            | (S n, m) => S (add (n, m))

        val rec mul =
           fn (O, m) => O
            | (S n, m) => add (m, mul (n, m))
     end
#+END_SRC

#+RESULTS:
: structure Nat :
:   sig
:     datatype t = O | S of t
:     val toInt : t -> IntInf.int
:     val add : t * t -> t
:     val mul : t * t -> t
:   end

*** Exercise 4

**** 1.

#+BEGIN_EXAMPLE
val apply = fn : ('a -> 'b) -> 'a -> 'b
#+END_EXAMPLE

#+BEGIN_SRC sml
  fun apply f x = f x
#+END_SRC

#+RESULTS:
: val apply = fn : ('a -> 'b) -> 'a -> 'b

**** 2.

#+BEGIN_EXAMPLE
val compose = fn : ('a -> 'b) -> ('c -> 'a) -> 'c -> 'b
#+END_EXAMPLE

#+BEGIN_SRC sml
  fun compose (g, f) = fn x => g (f x)
#+END_SRC

#+RESULTS:
: val compose = fn : ('a -> 'b) * ('c -> 'a) -> 'c -> 'b

*** Exercise 5

**** 1.

#+BEGIN_SRC sml
  val maxList =
     fn [] => raise (Fail "maxList: empty list")
      | x :: xs => foldl (fn (a, b) => if b > a then b else a) x xs
#+END_SRC

#+RESULTS:
: val maxList = fn : int list -> int

**** 2.

#+BEGIN_SRC sml
  val sumList = foldl (op +) 0
#+END_SRC

#+RESULTS:
: val sumList = fn : int list -> int

**** 3.

#+BEGIN_SRC sml
  fun polyList cs x = foldr (fn (a, b) => a + b * x) 0 cs
#+END_SRC

#+RESULTS:
: val polyList = fn : int list -> int -> int

**** 4.

#+BEGIN_SRC sml
  val rec revList =
     fn [] => []
      | x :: xs => revList xs @ [x]
#+END_SRC

#+RESULTS:
: val revList = fn : 'a list -> 'a list

**** 5.

#+BEGIN_EXAMPLE
  val mapList = fn : ('a -> 'b) -> 'a list -> 'b list
#+END_EXAMPLE

#+BEGIN_SRC sml
  fun mapList f = foldr (fn (a, b) => f a :: b) []
#+END_SRC

#+RESULTS:
: val mapList = fn : ('a -> 'b) -> 'a list -> 'b list

**** 6.

#+BEGIN_SRC sml
  fun fold f z =
     fn [] => z
      | x :: xs => fold f (f (x, z)) xs
#+END_SRC

#+RESULTS:
: val fold = fn : ('a * 'b -> 'b) -> 'b -> 'a list -> 'b

*** Exercise 6

#+BEGIN_SRC sml
  structure BinTree =
     struct
        datatype 'a t =
           Tip of 'a
         | Node of 'a t * 'a t

        fun fold fTip fNode tree =
           let val rec loop =
              fn Tip a => fTip a
               | Node (l, r) => fNode (loop l, loop r)
           in
              loop tree
           end

        fun breadth tree = fold (fn _ => 1) (op +) tree

        fun depth tree =
           fold (fn _ => 0) (fn (a, b) => 1 + Int.max (a, b)) tree

        fun toList tree = fold (fn x => [x]) (op @) tree

        val ex1 = Node (Node (Tip 1, Tip 2), Tip 3)

        val test1 = (breadth ex1, depth ex1, toList ex1)
     end
#+END_SRC

#+RESULTS:
#+begin_example
structure BinTree :
  sig
    datatype 'a t = Node of 'a t * 'a t | Tip of 'a
    val fold : ('a -> 'b) -> ('b * 'b -> 'b) -> 'a t -> 'b
    val breadth : 'a t -> int
    val depth : 'a t -> int
    val toList : 'a t -> 'a list
    val ex1 : int t
    val test1 : int * int * int list
  end
#+end_example

*** Exercise 7

#+BEGIN_SRC sml
  signature FIELD =
     sig
        eqtype t

        val zero : t
        val one : t
        val add : t * t -> t
        val addInv : t -> t
        val sub : t * t -> t
        val mul : t * t -> t
        val mulInv : t -> t
        val dvd : t * t -> t
     end

  structure Rational : FIELD =
     struct
        open IntInf

        type t = int * int

        val zero : t = (0, 1)

        val one : t = (1, 1)

        val rec gcd = fn (0, b) => b
                       | (a, b) => gcd (b mod a, a)

        (* gcd (a, b) has the same sign as a *)
        fun canon (a, b) = let val d = gcd (b, a) in (a div d, b div d) end

        fun add ((a, b), (c, d)) = canon (a * d + c * b, b * d)

        fun addInv (a, b) = canon (~a, b)

        fun sub (p, q) = add (p, addInv q)

        fun mul ((a, b), (c, d)) = canon (a * c, b * d)

        fun mulInv (a, b) = canon (b, a)

        fun dvd (p, q) = mul (p, mulInv q)
     end
#+END_SRC

#+RESULTS:
#+begin_example
signature FIELD =
  sig
    eqtype t
    val zero : t
    val one : t
    val add : t * t -> t
    val addInv : t -> t
    val sub : t * t -> t
    val mul : t * t -> t
    val mulInv : t -> t
    val dvd : t * t -> t
  end
structure Rational : FIELD
#+end_example
